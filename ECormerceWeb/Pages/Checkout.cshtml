@page
@model PizzaManagement.Pages.CheckoutModel
@{
    ViewData["Title"] = "Checkout";
}

<h2>Checkout</h2>
@if (Model.CartItems.Any())
{
    <h3>Your Cart:</h3>
    <table class="table">
        <thead>
            <tr>
                <th width="20%"></th>
                <th width="20%">Product Name</th>
                <th width="16%">Quantity</th>
                <th width="16%">Price</th>
                <th width="16%">Total</th>
                <th width="16%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.CartItems)
            {
                <input type="hidden" value="@item.ProductID" />
                <tr data-productid="@item.ProductID">
                    <td><img src="@item.imageURL" class="img-fluid rounded shadow-sm" style="max-height: 100px; object-fit: cover;" /></td>
                    <td>@item.ProductName</td>
                    <td><input type="number" min="1" class="form-control quantity-input" data-unitprice="@item.UnitPrice" value="@item.Quantity" /></td>
                    <td>@item.UnitPrice.ToString("C")</td>
                    <td class="total-price">$@(item.UnitPrice * item.Quantity)</td>
                    <th>
                        <form method="post" asp-page-handler="RemoveFromCart" asp-route-id="@item.ProductID">
                            <button type="submit" class="btn btn-danger">Remove</button>
                        </form>
                    </th>
                </tr>
            }
        </tbody>
    </table>

    <h4 id="cart-total">Total: @Model.CartTotal.ToString("C")</h4>

    <h3>Customer Information:</h3>

    <form method="post">
        <!-- Form for selecting or creating a new customer -->
        <div class="form-group">
            <label for="existingCustomer">Select Existing Receiver:</label>
            <select id="existingCustomer" name="SelectedCustomerId" class="form-control">
                <option value="">-- Select a Receiver --</option>
                @foreach (var customer in Model.Customers)
                {
                    <option value="@customer.CustomerID">@customer.ContactName (@customer.Phone) Address: @customer.Address</option>
                }
            </select>
        </div>

        <hr />

        <h4>Or Create a New Receiver:</h4>
        <div class="form-group">
            <label for="newCustomerName">Name:</label>
            <input type="text" id="newCustomerName" name="NewCustomer.ContactName" class="form-control" asp-for="NewCustomer.ContactName" />
            <span asp-validation-for="NewCustomer.ContactName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="newCustomerAddress">Address:</label>
            <input type="text" id="newCustomerAddress" name="NewCustomer.Address" class="form-control" asp-for="NewCustomer.Address" />
            <span asp-validation-for="NewCustomer.Address" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="newCustomerPhone">Phone:</label>
            <input type="text" id="newCustomerPhone" name="NewCustomer.Phone" class="form-control" asp-for="NewCustomer.Phone" />
            <span asp-validation-for="NewCustomer.Phone" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary mt-4">Confirm Purchase</button>
    </form>
}
else
{
    <p>Your cart is empty.</p>

}
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Select all quantity input fields
            const quantityInputs = document.querySelectorAll(".quantity-input");

            // Add input event listener to each quantity input
            quantityInputs.forEach(input => {
                input.addEventListener("input", function () {
                    const row = this.closest("tr");
                    const productId = row.getAttribute("data-productid");
                    const unitPrice = parseFloat(this.getAttribute("data-unitprice"));
                    const newQuantity = parseInt(this.value) || 1;

                    const newTotal = unitPrice * newQuantity;
                    row.querySelector(".total-price").textContent = "$" + newTotal.toFixed(2);

                    updateCartTotal();

                    // AJAX request to update the cart session on the server
                    fetch('/Checkout?handler=UpdateQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ ProductId: productId, Quantity: newQuantity })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (!data.success) {
                                alert('Error updating cart.');
                            } else {
                                document.getElementById("cart-total").textContent = "Total: " + data.newTotal;
                            }
                        })
                        .catch(error => console.error('Error:', error));
                });
            });
        });

        function updateCartTotal() {
            let total = 0;
            document.querySelectorAll(".total-price").forEach(cell => {
                total += parseFloat(cell.textContent.replace('$', ''));
            });
            document.getElementById("cart-total").textContent = "Total: $" + total.toFixed(2);
        }
    </script>
}